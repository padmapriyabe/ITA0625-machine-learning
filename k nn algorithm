import numpy as np
from collections import Counter

class KNNClassifier:
    def __init__(self, k=3):
        self.k = k

    def fit(self, X_train, y_train):
        self.X_train = np.array(X_train)
        self.y_train = np.array(y_train)

    def predict(self, X_test):
        predictions = [self._predict(x) for x in X_test]
        return np.array(predictions)

    def _predict(self, x):
        # Calculate distances to all points in the training set
        distances = [np.linalg.norm(x - x_train) for x_train in self.X_train]

        # Get indices of k-nearest training data points
        k_indices = np.argsort(distances)[:self.k]

        # Get the labels of the k-nearest training data points
        k_nearest_labels = [self.y_train[i] for i in k_indices]

        # Return the most common class label among the k-nearest neighbors
        most_common = Counter(k_nearest_labels).most_common(1)
        return most_common[0][0]

# Example usage with a synthetic dataset
if __name__ == "__main__":
    # Generating a synthetic dataset
    np.random.seed(42)
    X_train = np.random.rand(10, 2)
    y_train = np.array([0, 0, 0, 0, 1, 1, 1, 1, 1, 1])

    X_test = np.random.rand(5, 2)

    # Create and train the KNN classifier
    k = 3
    knn_classifier = KNNClassifier(k)
    knn_classifier.fit(X_train, y_train)

    # Make predictions on the test set
    predictions = knn_classifier.predict(X_test)

    # Display the results
    print("Test Data:")
    print(X_test)
    print("\nPredictions:")
    print(predictions)

