import numpy as np

class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        # Define the architecture of the neural network
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size

        # Initialize weights and biases
        self.weights_input_hidden = np.random.rand(self.input_size, self.hidden_size)
        self.bias_hidden = np.zeros((1, self.hidden_size))
        self.weights_hidden_output = np.random.rand(self.hidden_size, self.output_size)
        self.bias_output = np.zeros((1, self.output_size))

    def sigmoid(self, x):
        return 1 / (1 + np.exp(-x))

    def sigmoid_derivative(self, x):
        return x * (1 - x)

    def forward(self, inputs):
        # Perform the forward propagation
        self.hidden_activation = self.sigmoid(np.dot(inputs, self.weights_input_hidden) + self.bias_hidden)
        self.output = self.sigmoid(np.dot(self.hidden_activation, self.weights_hidden_output) + self.bias_output)
        return self.output

    def backward(self, inputs, targets, learning_rate):
        # Perform the backward propagation (Backpropagation)
        error = targets - self.output
        output_delta = error * self.sigmoid_derivative(self.output)

        hidden_error = output_delta.dot(self.weights_hidden_output.T)
        hidden_delta = hidden_error * self.sigmoid_derivative(self.hidden_activation)

        # Update weights and biases
        self.weights_hidden_output += self.hidden_activation.T.dot(output_delta) * learning_rate
        self.bias_output += np.sum(output_delta, axis=0, keepdims=True) * learning_rate
        self.weights_input_hidden += inputs.T.dot(hidden_delta) * learning_rate
        self.bias_hidden += np.sum(hidden_delta, axis=0, keepdims=True) * learning_rate

    def train(self, inputs, targets, epochs, learning_rate):
        for epoch in range(epochs):
            # Forward and backward propagation for each training example
            for i in range(len(inputs)):
                input_data = np.array([inputs[i]])
                target_data = np.array([targets[i]])

                # Forward pass
                self.forward(input_data)

                # Backward pass
                self.backward(input_data, target_data, learning_rate)

            # Print the mean squared error for every 100 epochs
            if (epoch + 1) % 100 == 0:
                mse = np.mean((targets - self.forward(inputs)) ** 2)
                print(f"Epoch {epoch + 1}/{epochs}, Mean Squared Error: {mse}")

# Example usage with the XOR problem
if __name__ == "__main__":
    # XOR dataset
    xor_inputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
    xor_targets = np.array([[0], [1], [1], [0]])

    # Create and train the neural network
    input_size = 2
    hidden_size = 2
    output_size = 1
    learning_rate = 0.1
    epochs = 1000

    neural_network = NeuralNetwork(input_size, hidden_size, output_size)
    neural_network.train(xor_inputs, xor_targets, epochs, learning_rate)

    # Test the trained network on the XOR dataset
    predictions = neural_network.forward(xor_inputs)
    print("\nPredictions after training:")
    print(predictions)
